{"ast":null,"code":"import _classCallCheck from \"/Users/ke-vinhhoang/Documents/FinalProject/facerecognition/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ke-vinhhoang/Documents/FinalProject/facerecognition/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ke-vinhhoang/Documents/FinalProject/facerecognition/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ke-vinhhoang/Documents/FinalProject/facerecognition/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ke-vinhhoang/Documents/FinalProject/facerecognition/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/ke-vinhhoang/Documents/FinalProject/facerecognition/src/App.js\";\nimport React, { Component } from 'react';\nimport Particles from 'react-particles-js';\nimport Clarifai from 'clarifai';\nimport Navigation from './components/Navigation/Navigation';\nimport Rank from './components/Rank/Rank';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport './App.css';\nvar app = new Clarifai.App({\n  apiKey: '39d724ef70ae41269091815b2c038508'\n});\nvar particlesOptions = {\n  particles: {\n    number: {\n      value: 100,\n      density: {\n        enable: true,\n        value_area: 800\n      }\n    },\n    size: {\n      enable: true,\n      value: 2\n    }\n  }\n};\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this));\n\n    _this.calculateFaceLocation = function (data) {\n      // let boxArray = [];           // instead of creating a new array (because in order to use the map method, we need to have an array), we can simply set this.state.box: [] (an array) \n      var clarifaiFace = data.outputs[0].data.regions;\n      var regionInfo = data.region_info.bounding_box;\n      var image = document.getElementById('inputimage');\n      var width = Number(image.width);\n      var height = Number(image.height); // console.log(width, height);\n      // the for of loop syntax is: for (variable of iterable) { statement } **iterables are arrays and strings (able to iterate over INDIVIDUAL items) so in this case 'data.outputs[0].data.regions' is an array \n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = clarifaiFace[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var face = _step.value;\n\n          _this.state.box.push({\n            leftCol: face.regionInfo.left_col * width,\n            topRow: face.regionInfo.top_row * height,\n            rightCol: width - face.regionInfo.right_col * width,\n            bottomRow: height - face.regionInfo.bottom_row * height\n          }); // here what we're doing is we are looping over each 'face' that it detects and pushes the value of the the columns and rows into the 'this.state.box' array so that later on in 'FaceRecognition.js' we can map over the array and have it generate the box (CSS lines).\n\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return _this.state.box;\n    };\n\n    _this.displayFaceBox = function (boxValue) {\n      console.log(boxValue);\n\n      _this.setState({\n        box: boxValue\n      });\n    };\n\n    _this.onInputChange = function (event) {\n      _this.setState({\n        input: event.target.value\n      });\n    };\n\n    _this.onButtonSubmit = function () {\n      _this.setState({\n        imageUrl: _this.state.input\n      });\n\n      app.models.predict(Clarifai.DEMOGRAPHICS_MODEL, _this.state.input).then(function (response) {\n        return _this.displayFaceBox(_this.calculateFaceLocation(response));\n      }).catch(function (err) {\n        return console.log(err);\n      }); // .then(                         // check the breakdown of the nested object\n      //   function(response) {\n      //     console.log(response);\n      //   }\n      // )\n      // console.log('characteristics', response.outputs[0].data.regions[0].data.face);\n      // console.log('face box', response.outputs[0].data.regions[0].region_info.bounding_box);\n    };\n\n    _this.state = {\n      input: '',\n      imageUrl: '',\n      box: []\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(Particles, {\n        className: \"particles\",\n        params: particlesOptions,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }), React.createElement(Navigation, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }), React.createElement(Rank, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }), React.createElement(ImageLinkForm, {\n        onInputChange: this.onInputChange,\n        onButtonSubmit: this.onButtonSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }), React.createElement(FaceRecognition, {\n        box: this.state.box,\n        imageUrl: this.state.imageUrl,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App; // (1) since onInputChange is a part of the 'App' class, to access it, we need to do 'this.onInputChange' because onInputChange is a property of the 'App'","map":{"version":3,"sources":["/Users/ke-vinhhoang/Documents/FinalProject/facerecognition/src/App.js"],"names":["React","Component","Particles","Clarifai","Navigation","Rank","ImageLinkForm","FaceRecognition","app","App","apiKey","particlesOptions","particles","number","value","density","enable","value_area","size","calculateFaceLocation","data","clarifaiFace","outputs","regions","regionInfo","region_info","bounding_box","image","document","getElementById","width","Number","height","face","state","box","push","leftCol","left_col","topRow","top_row","rightCol","right_col","bottomRow","bottom_row","displayFaceBox","boxValue","console","log","setState","onInputChange","event","input","target","onButtonSubmit","imageUrl","models","predict","DEMOGRAPHICS_MODEL","then","response","catch","err"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Particles from 'react-particles-js';\nimport Clarifai from 'clarifai';\nimport Navigation from './components/Navigation/Navigation';\nimport Rank from './components/Rank/Rank';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport './App.css';\n\nconst app = new Clarifai.App({\n  apiKey: '39d724ef70ae41269091815b2c038508'\n });\n\nconst particlesOptions = {\n  particles: {\n    number: {\n      value: 100,\n      density: {\n        enable: true,\n        value_area: 800\n      }\n    },\n    size: {\n      enable: true,\n      value: 2\n    }\n  }\n}\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      input: '',\n      imageUrl: '',\n      box: [],\n    }\n  }\n\n  calculateFaceLocation = (data) => {\n    // let boxArray = [];           // instead of creating a new array (because in order to use the map method, we need to have an array), we can simply set this.state.box: [] (an array) \n\n    const clarifaiFace = data.outputs[0].data.regions;\n    const regionInfo = data.region_info.bounding_box;\n    const image = document.getElementById('inputimage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n    // console.log(width, height);\n\n    // the for of loop syntax is: for (variable of iterable) { statement } **iterables are arrays and strings (able to iterate over INDIVIDUAL items) so in this case 'data.outputs[0].data.regions' is an array \n    for (const face of clarifaiFace) {\n\n      this.state.box.push({\n        leftCol: face.regionInfo.left_col * width,\n        topRow: face.regionInfo.top_row * height,\n        rightCol: width - (face.regionInfo.right_col * width),\n        bottomRow: height - (face.regionInfo.bottom_row * height)\n      });\n    // here what we're doing is we are looping over each 'face' that it detects and pushes the value of the the columns and rows into the 'this.state.box' array so that later on in 'FaceRecognition.js' we can map over the array and have it generate the box (CSS lines).\n    }\n    \n    return this.state.box;\n  }\n\n  displayFaceBox = (boxValue) => {\n    console.log(boxValue);\n    this.setState({ box: boxValue });\n  }\n\n  onInputChange = (event) => {\n    this.setState({ input: event.target.value });\n  }\n\n  onButtonSubmit = () => {\n    this.setState({ imageUrl: this.state.input });\n    app.models\n      .predict(\n        Clarifai.DEMOGRAPHICS_MODEL, \n        this.state.input)\n      .then(response => this.displayFaceBox(this.calculateFaceLocation(response)))\n      .catch(err => console.log(err));\n        // .then(                         // check the breakdown of the nested object\n        //   function(response) {\n        //     console.log(response);\n        //   }\n        // )\n        // console.log('characteristics', response.outputs[0].data.regions[0].data.face);\n        // console.log('face box', response.outputs[0].data.regions[0].region_info.bounding_box);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Particles className='particles'\n          params={particlesOptions}\n        />\n        <Navigation />\n        <Rank />\n        <ImageLinkForm \n          onInputChange={this.onInputChange} \n          onButtonSubmit={this.onButtonSubmit}\n        />\n        <FaceRecognition box={this.state.box} imageUrl={this.state.imageUrl}/> \n      </div>\n    );\n  }\n}\n\nexport default App;\n\n// (1) since onInputChange is a part of the 'App' class, to access it, we need to do 'this.onInputChange' because onInputChange is a property of the 'App'\n"]},"metadata":{},"sourceType":"module"}